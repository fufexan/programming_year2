/*
 * Lab 6, Fufezan Mihai, ex 2
 * 2. Write a Java application which, within the main() method, contains a
 * sequence of code that may throw various exceptions, such as
 * ArithmeticException, ArrayIndexOutOfBoundsException, NullPointerException,
 * NumberFormatException, as well as others which you consider to be useful for
 * testing. In the catch block show the corresponding message generated by
 * these exceptions. The `finally` block just prints the message, "I may or
 * may not have caught an exception".
 */

import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

public class TestExceptions {
    public static void main(String[] args) {
        String finallyMessage = "I'm the `finally` block. I may or may not have caught an exception";

        try {
            System.out.println(3 / 0);
        } catch (ArithmeticException e) {
            System.err.println("Integer division by zero is forbidden!");
        } finally {
            System.out.println(finallyMessage);
        }

        try {
            System.out.println((new int[]{3})[1]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.err.println("Cannot access elements outside the array bounds!");
        } finally {
            System.out.println(finallyMessage);
        }

        try {
            String x = null;
            System.out.println(x.length());
        } catch (NullPointerException e) {
            System.err.println("Cannot access the method of a null object!");
        } finally {
            System.out.println(finallyMessage);
        }

        try {
            int x = Integer.parseInt("no ints here");
        } catch (NumberFormatException e) {
            System.err.println("Could not convert string to integer, because there are no integers present in the string!");
        } finally {
            System.out.println(finallyMessage);
        }
    }
}
